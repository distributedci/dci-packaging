# -*- shell-script -*-

function cleanup() {
    rm -rf ${TOPDIR}
}

TOPDIR=$(mktemp -d)
mkdir ${TOPDIR}/SPECS ${TOPDIR}/SOURCES ${TOPDIR}/SRPMS
trap cleanup 0

function replace_mirror_with_vault_on_el8(){
    if [[ "$arch" == "epel-8-x86_64" ]]; then
        sudo sed -i -e '/mirrorlist/d' -e 's/^#baseurl/baseurl/' -e 's/mirror.centos/vault.centos/' /etc/mock/templates/centos-stream-8.tpl
    fi
}

function set_rdo_cloud_mirror() {
    cfg_file=$1

    sed -i "s#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=os#baseurl=http://${RDO_CLOUD_MIRROR}/centos/7/os/x86_64/#g" $cfg_file
    sed -i "s#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=updates#baseurl=http://${RDO_CLOUD_MIRROR}/centos/7/updates/x86_64/#g" $cfg_file
}

function generate_mock_profile() {
    local cfg
    cfg=${HOME}/.mock/${arch}-with-extras.cfg
    source $basedir/config-${arch}.rc

    # Note: Need to contact the npm registry to retrieve the npm modules
    # or pypi to retrieve python modules
    if [[ "$PROJ_NAME" == "dci-ui" || "$PROJ_NAME" == "dci-blog" ]]; then
        repo_conf["project_specific"]='
config_opts["use_host_resolv"] = True
config_opts["rpmbuild_networking"] = True
'
    fi

    if [[ -n "$PATH_TO_REPO" ]]; then
repo_conf["project_specific"]='
config_opts["plugin_conf"]["bind_mount_enable"] = True
config_opts["plugin_conf"]["bind_mount_opts"]["dirs"].append(("'$PATH_TO_REPO'", "/tmp/dependency_repo"))
'
    fi

    mkdir -p ${HOME}/.mock
    cat <<EOF > $cfg.new
${repo_conf[header]}

${repo_conf[repo]}
${repo_conf[misc]}
${repo_conf[project_specific]}

config_opts['root'] = '${arch}'
config_opts['target_arch'] = 'x86_64'
config_opts['legal_host_arches'] = ('x86_64',)
config_opts['dnf_warning'] = False
EOF
    if [ ! -r $cfg ] || ! cmp $cfg $cfg.new; then
        mv $cfg.new $cfg
    fi
}

function setup_build() {
    # Create the proper filesystem hierarchy to proceed with srpm creation
    #
    echo "====== Mock configuration ======"
    cat ${HOME}/.mock/${arch}-with-extras.cfg
    echo "================================"
    mock $MOCKOPTS --clean
}


function generate_srpm() {
    cp ${PROJ_NAME}.spec ${TOPDIR}/SPECS/

    # keep these commands in sync with dcibuild.py
    Z=$(git show HEAD -s --format=%ct)
    DATE=$(date --utc --date=@${Z} '+%Y%m%d%H%M')
    SHA=$(git rev-parse --short=8 HEAD)

    if [[ -e setup.py ]]; then
        rm -rf ./dist
        MOCKDIR=$(mock $MOCKOPTS -p)
        MOCKDIR=${MOCKDIR%/}
        mkdir $MOCKDIR/var/tmp/pkgsrc $MOCKDIR/var/tmp/dci-packaging
        cp -pr . $MOCKDIR/var/tmp/pkgsrc
        cp -pr $DCI_PKG_DIR/*.py $MOCKDIR/var/tmp/dci-packaging/
        ls $MOCKDIR/var/tmp
        if [[ "$arch" == "epel-9-x86_64" ]]; then
            PYTHON_INTERPRETERS="python3 python3-devel"
        else
            PYTHON_INTERPRETERS="python2 python2-devel python2-setuptools python36 python36-devel"
        fi
        mock $MOCKOPTS --install $PYTHON_INTERPRETERS git-core
        if [[ "$arch" == "epel-7-x86_64" ]]; then
            PYTHON=python2
        else
            PYTHON=python3
        fi
        mock $MOCKOPTS --chroot "cd /var/tmp/pkgsrc && git config --global --add safe.directory /var/tmp/pkgsrc && PYTHONPATH=../dci-packaging $PYTHON setup.py sdist"
        mock $MOCKOPTS --copyout /var/tmp/pkgsrc/dist ./dist
        mock $MOCKOPTS --clean
        cp -v dist/* ${TOPDIR}/SOURCES/
        if [[ -d contrib/systemd ]]; then
            cp -v contrib/systemd/* ${TOPDIR}/SOURCES/
        fi
    else
        VERS=$(rpmspec -q --qf "%{version}\n" ${TOPDIR}/SPECS/${PROJ_NAME}.spec|head -n1 2>/dev/null)
        if [[ "$PROJ_NAME" == "dci-doc" ]]; then
            DATE=$(date --utc +%Y%m%d%H%M)
            VERS=$(echo $VERS | sed -e "s/EPOCH/${Z}/g" -e "s/VERS/${DATE}git${SHA}/g")
            ./build.sh
            cp -r docs ${PROJ_NAME}-${VERS}
            tar -czvf ${PROJ_NAME}-${VERS}.tar.gz ${PROJ_NAME}-${VERS}
            mv ${PROJ_NAME}-${VERS}.tar.gz ${TOPDIR}/SOURCES/
        else
            VERS=$(echo $VERS | sed -e "s/EPOCH/${Z}/g" -e "s/VERS/${DATE}git${SHA}/g")
            git archive HEAD --format=tgz --output=${TOPDIR}/SOURCES/${PROJ_NAME}-${VERS}.tar.gz
        fi
    fi
    sed -i "s/VERS/${DATE}git${SHA}/g" ${TOPDIR}/SPECS/${PROJ_NAME}.spec
    sed -i "s/DATE/${DATE}/g" ${TOPDIR}/SPECS/${PROJ_NAME}.spec
    sed -i "s/EPOCH/${Z}/g" ${TOPDIR}/SPECS/${PROJ_NAME}.spec

    if [[ "$PROJ_NAME" == "dci-gpgpubkey" ]]; then
        cp distributed-ci.pub ${TOPDIR}/SOURCES/
    fi

    SOURCES=""
    for source in ${TOPDIR}/SOURCES/*; do
        SOURCES+=" --sources=$source"
    done

    mock $MOCKOPTS --buildsrpm --spec ${TOPDIR}/SPECS/${PROJ_NAME}.spec $SOURCES --resultdir=${TOPDIR}/SRPMS/
}


setup_additional_repos() {
    REQUIRES_SCL="dci-control-server python-dciclient dci-ui"
    REQUIRES_EXTRAS="dci-control-server"

    if [[ "$REQUIRES_SCL" =~ (^|[[:space:]])"$PROJ_NAME"($|[[:space:]]) && "$arch" == "epel-7-x86_64" ]]; then
        MOCKOPTS+=" --enablerepo centos-sclo-rh-for-dci"
    fi

    if [[ "$REQUIRES_EXTRAS" =~ (^|[[:space:]])"$PROJ_NAME"($|[[:space:]]) ]]; then
        case $arch in
            "epel-7-x86_64")
                MOCKOPTS+=" --enablerepo dci-extras"
                MOCKOPTS+=" --enablerepo centos-openstack-rocky"
                sudo update-crypto-policies --set DEFAULT:SHA1
                ;;
            "epel-8-x86_64")
                MOCKOPTS+=" --enablerepo dci-extras"
                MOCKOPTS+=" --enablerepo centos-openstack-ussuri"
                sudo update-crypto-policies --set DEFAULT:SHA1
                ;;
            "epel-9-x86_64")
                MOCKOPTS+=" --enablerepo centos-openstack-yoga"
                ;;
            *)
                ;;
        esac
    fi
}

# -*- shell-script -*-

function cleanup() {
    rm -rf ${TOPDIR}
}

TOPDIR=$(mktemp -d)
mkdir ${TOPDIR}/SPECS ${TOPDIR}/SOURCES ${TOPDIR}/SRPMS
trap cleanup 0

function set_rdo_cloud_mirror() {
    cfg_file=$1

    sed -i "s#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=os#baseurl=http://${RDO_CLOUD_MIRROR}/centos/7/os/x86_64/#g" $cfg_file
    sed -i "s#mirrorlist=http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=updates#baseurl=http://${RDO_CLOUD_MIRROR}/centos/7/updates/x86_64/#g" $cfg_file
}

function semver_check() {
    # takes two versions strings to ensure there's no downgrade
    # if version_1 >= version_2 returns 1 else -1
    local version_1 version_2
    version_1=($(echo $1 | tr "." " "))
    version_2=($(echo $2 | tr "." " "))

    pos=0
    while [ $([ "${version_1[$pos]}" -eq "${version_2[$pos]}" ] &&  [ $pos -lt ${#version_1[@]} ] && echo true)  ]; do
	pos=$((pos+1))
    done
    if [ "${version_1[$pos]}" -ge "${version_2[$pos]}" ]; then
	echo "OK: Semantic versioning is going forward"
	return 0
    else
	echo "KO: Semantic versioning is going backward"
	exit 1
    fi
}

function generate_mock_profile() {
    local cfg
    cfg=${HOME}/.mock/${arch}-with-extras.cfg
    source $basedir/config-${arch}.rc

    # Note: Need to contact the npm registry to retrieve the npm modules
    # or pypi to retrieve python modules
    if [[ "$PROJ_NAME" == "dci-ui" || "$PROJ_NAME" == "dci-blog" ]]; then
        repo_conf["project_specific"]='
config_opts["use_host_resolv"] = True
config_opts["rpmbuild_networking"] = True
'
    fi

    if [[ -n "$PATH_TO_REPO" ]]; then
repo_conf["project_specific"]='
config_opts["plugin_conf"]["bind_mount_enable"] = True
config_opts["plugin_conf"]["bind_mount_opts"]["dirs"].append(("'$PATH_TO_REPO'", "/tmp/dependency_repo"))
'
    fi

    mkdir -p ${HOME}/.mock
    cat <<EOF > $cfg.new
${repo_conf[header]}

${repo_conf[repo]}
${repo_conf[misc]}
${repo_conf[project_specific]}

config_opts['root'] = '${arch}'
config_opts['target_arch'] = 'x86_64'
config_opts['legal_host_arches'] = ('x86_64',)
config_opts['dnf_warning'] = False
EOF
    if [ ! -r $cfg ] || ! cmp $cfg $cfg.new; then
        mv $cfg.new $cfg
    fi
}

function setup_build() {
    # Create the proper filesystem hierarchy to proceed with srpm creatioon
    #
    echo "====== Mock configuration ======"
    cat ${HOME}/.mock/${arch}-with-extras.cfg
    echo "================================"
    mock $MOCKOPTS --clean
}


function generate_srpm() {
    IS_DISTGIT=""
    if [[ "$PROJ_NAME" == *-distgit ]]; then
        shopt -u nullglob
        IS_DISTGIT="true"
        SPECS=( *.spec )
        if [[ ${#SPECS[@]} == 0 ]]; then
            echo "ERROR: No spec file in repository"
            exit 1
        elif [[ ${#SPECS[@]} == 1 ]]; then
            PROJ_NAME=${SPECS[0]//.spec}
        else
            echo "ERROR: Too many spec files in repository ($SPECS[@])"
            exit 1
        fi
    fi
    # Retrieve semantic version info for managed projects
    if [[ -e VERSION ]]; then
        SEMVER=$(cat VERSION | tr -d "[:space:]")
        set +e
        git cat-file blob HEAD~1:VERSION > VERSION.old
        if [ $? -eq 0 ]; then
            SEMVER_OLD=$(cat VERSION.old | tr -d "[:space:]")
            semver_check $SEMVER $SEMVER_OLD
        fi
        set -e
    fi
    cp ${PROJ_NAME}.spec ${TOPDIR}/SPECS/

    DATE=$(date --utc +%Y%m%d%H%M)
    SHA=$(git rev-parse --short=8 HEAD)
    if [[ -e setup.py ]]; then
        rm -rf ./dist
        # set version in version.py to be consistent with RPM
        if [[ -v SEMVER ]]; then
            find . -maxdepth 2 -type f \( -name "version.py" -o -name "setup.py" \) -exec \
                 sed -i "s/SEMVER/${SEMVER}.dev0-${DATE}git${SHA}/" {} \;
            sed -i "s/SEMVER/${SEMVER}/g" ${TOPDIR}/SPECS/${PROJ_NAME}.spec
        fi
        MOCKDIR=$(mock $MOCKOPTS -p)
        MOCKDIR=${MOCKDIR%/}
        mkdir $MOCKDIR/var/tmp/pkgsrc
        cp -pr . $MOCKDIR/var/tmp/pkgsrc
        if [[ "$arch" == "epel-9-x86_64" ]]; then
            PYTHON_INTERPRETERS="python3 python3-devel"
        else
            PYTHON_INTERPRETERS="python2 python2-devel python2-setuptools python36 python36-devel"
        fi
        mock $MOCKOPTS --install $PYTHON_INTERPRETERS
        if [[ "$arch" == "epel-9-x86_64" ]]; then
            mock $MOCKOPTS --chroot "cd /var/tmp/pkgsrc && python3 setup.py sdist"
        else
            mock $MOCKOPTS --chroot "cd /var/tmp/pkgsrc && python2 setup.py sdist"
        fi
        mock $MOCKOPTS --copyout /var/tmp/pkgsrc/dist ./dist
        mock $MOCKOPTS --clean
        cp -v dist/* ${TOPDIR}/SOURCES/
        if [[ -d contrib/systemd ]]; then
            cp -v contrib/systemd/* ${TOPDIR}/SOURCES/
        fi
    else
        VERS=$(rpmspec -q --qf "%{version}\n" ${TOPDIR}/SPECS/${PROJ_NAME}.spec|head -n1 2>/dev/null)
        VERS=$(echo $VERS | sed "s/VERS/${DATE}git${SHA}/g")
        if [[ "$PROJ_NAME" == "dci-doc" ]]; then
            ./build.sh
            cp -r docs ${PROJ_NAME}-${VERS}
            tar -czvf ${PROJ_NAME}-${VERS}.tar.gz ${PROJ_NAME}-${VERS}
            mv ${PROJ_NAME}-${VERS}.tar.gz ${TOPDIR}/SOURCES/
        elif [[ -n "${IS_DISTGIT}" ]]; then
            spectool -g ${PROJ_NAME}.spec -C ${TOPDIR}/SOURCES/
            # FIXME(hguemar): just copy sources and patches listed in spec file
            GLOBIGNORE=${PROJ_NAME}.spec
            cp -r * ${TOPDIR}/SOURCES/
        else
            git archive HEAD --format=tgz --output=${TOPDIR}/SOURCES/${PROJ_NAME}-${VERS}.tar.gz
        fi
    fi
    sed -i "s/VERS/${DATE}git${SHA}/g" ${TOPDIR}/SPECS/${PROJ_NAME}.spec

    if [[ "$PROJ_NAME" == "dci-gpgpubkey" ]]; then
        cp distributed-ci.pub ${TOPDIR}/SOURCES/
    fi

    SOURCES=""
    for source in ${TOPDIR}/SOURCES/*; do
        SOURCES+=" --sources=$source"
    done

    mock $MOCKOPTS --buildsrpm --spec ${TOPDIR}/SPECS/${PROJ_NAME}.spec $SOURCES --resultdir=${TOPDIR}/SRPMS/
}


setup_additional_repos() {
    REQUIRES_SCL="dci-control-server python-dciclient dci-ui"
    REQUIRES_EXTRAS="dci-control-server"

    if [[ "$REQUIRES_SCL" =~ (^|[[:space:]])"$PROJ_NAME"($|[[:space:]]) && "$arch" == "epel-7-x86_64" ]]; then
        MOCKOPTS+=" --enablerepo centos-sclo-rh-for-dci"
    fi

    if [[ "$REQUIRES_EXTRAS" =~ (^|[[:space:]])"$PROJ_NAME"($|[[:space:]]) ]]; then
        case $arch in
            "epel-7-x86_64")
                MOCKOPTS+=" --enablerepo dci-extras"
                MOCKOPTS+=" --enablerepo centos-openstack-rocky"
                ;;
            "epel-8-x86_64")
                MOCKOPTS+=" --enablerepo dci-extras"
                MOCKOPTS+=" --enablerepo centos-openstack-ussuri"
                ;;
            "epel-9-x86_64")
                MOCKOPTS+=" --enablerepo centos-openstack-yoga"
                ;;
            *)
                ;;
        esac
    fi
}
